/**
 * @file player_motion_handler.h
 *
 * @copyright 2017 3081 Staff, All rights reserved.
 */

#ifndef PROJECT_ITERATION2_SRC_PLAYER_MOTION_HANDLER_H_
#define PROJECT_ITERATION2_SRC_PLAYER_MOTION_HANDLER_H_

/*******************************************************************************
 * Includes
 ******************************************************************************/
#include "src/event_commands.h"
#include "src/player_params.h"
#include "src/arena_mobile_entity.h"
#include "src/motion_handler.h"
#include "src/sensor_touch.h"

/*******************************************************************************
 * Namespaces
 ******************************************************************************/
NAMESPACE_BEGIN(csci3081);

/*******************************************************************************
 * Classes
 ******************************************************************************/
/**
 * @brief Class managing an ArenaMobileEntity's speed and heading angle based
 * on collisions and (in the case of Player) user inputs.
 *
 * Currently, both wheels are always going at maximum speed, and
 * cannot be controlled independently.
 */
class PlayerMotionHandler : public MotionHandler {
 public:
  /**
   * @brief Default constructor.
   */
  PlayerMotionHandler();

  /**
   * @brief Reset the actuators to their newly constructed/un-commanded state.
   *
   * Currently does nothing.
   */
  void Reset();

  /**
   * @brief Handling commands from the GraphicsArenaViewer (generated by user
   * keypress).
   *
   * Up arrow increases speed, up to a defined limit.
   * Down arrow decreases speed, down to 0 (no negative speeds).
   * Right arrow changes the heading angle clockwise.
   * Left arrow changes the heading angle counter-clockwise.
   *
   * Maximum speed, speed delta, and angle delta are defined in main.cc.
   *
   * @param cmd The command to be processed.
   */

  void AcceptCommand(enum event_commands cmd);

  void UpdateVelocity(SensorTouch st);
  /**
   * @brief Duplicate getter method for speed. Added to pass unit tests.
   *
   * @return The current speed.
   *
   * @todo remove at iteration 2, only keep get_speed
   */
  double speed() const { return speed_; }

  /**
   * @brief Duplicate setter method for speed. Added to pass unit tests.
   *
   * @return The new speed.
   *
   * @todo remove at iteration 2, only keep set_speed
   */
  void speed(double sp) { speed_ = sp; }

  /**
   * @brief Getter method for speed.
   *
   * @return The current speed.
   */

  /**
   * @brief Duplicate getter method for speed. Added to pass unit tests.
   *
   * @return The current speed.
   *
   * @todo remove at iteration 2, only keep get_speed
   */
  double get_speed() const { return speed_; }

  /**
   * @brief Setter method for speed.
   *
   * @param sp The new speed.
   */
  void set_speed(double sp) { speed_ = sp; }

  /**
   * @brief Getter method for heading angle.
   *
   * @return The current heading angle.
   */
  double heading_angle() const { return heading_angle_; }

  /**
   * @brief Setter method for heading angle.
   *
   * @param ha The new heading angle.
   */
  void heading_angle(double ha) { heading_angle_ = ha; }

  /**
   * @brief Getter method for the speed delta.
   *
   * @return The current speed delta.
   */
  double speed_delta() const { return speed_delta_; }

  /**
   * @brief Setter method for the speed delta.
   *
   * @param sd The new speed delta.
   */
  void speed_delta(double sd) { speed_delta_ = sd; }

  /**
   * @brief Getter method for the angle delta.
   *
   * @return The current angle delta.
   */
  double angle_delta() const { return angle_delta_; }

  /**
   * @brief Setter method for the angle delta.
   *
   * @param ad The new angle delta.
   */
  void angle_delta(double ad) { angle_delta_ = ad; }

 private:
  double heading_angle_;
  double speed_;
  double speed_delta_;
  double angle_delta_;
};

NAMESPACE_END(csci3081);

#endif   // PROJECT_ITERATION2_SRC_PLAYER_MOTION_HANDLER_H_
